rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a playlist is public
    function isPlaylistPublic(playlistId) {
      return exists(/databases/$(database)/documents/playlists/$(playlistId)) &&
             get(/databases/$(database)/documents/playlists/$(playlistId)).data.isPublic == true;
    }
    
    // Allow authenticated users to read any document
    match /{document=**} {
      allow read: if request.auth != null;
    }
    
    // Allow users to read/write their own profile
    match /users/{userId} {
      allow read: if true; // Anyone can read user profiles
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow users to create and manage their own playlists
    match /playlists/{playlistId} {
      // Allow public access to public playlists
      allow read: if request.auth != null || resource.data.isPublic == true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Allow listing playlists
    match /playlists {
      // Authenticated users can list all playlists
      // Public users can only list public playlists
      allow list: if request.auth != null || resource.data.isPublic == true;
    }
    
    // Handle votes - combine rules for authenticated and public access
    match /votes/{voteId} {
      // Allow read access for votes if user is authenticated OR the vote belongs to a public playlist
      allow read: if request.auth != null || 
                  (resource.data.playlistId != null && 
                   isPlaylistPublic(resource.data.playlistId));
      
      // Users can only create votes with their own userId
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      
      // Users can only update their own votes and only if the playlist allows vote changes
      allow update: if request.auth != null && 
                     resource.data.userId == request.auth.uid &&
                     get(/databases/$(database)/documents/playlists/$(resource.data.playlistId)).data.allowVoteChanges == true;
      
      // Users can only delete their own votes and only if the playlist allows vote changes
      allow delete: if request.auth != null && 
                     resource.data.userId == request.auth.uid &&
                     get(/databases/$(database)/documents/playlists/$(resource.data.playlistId)).data.allowVoteChanges == true;
    }
    
    // Allow listing votes for public access
    match /votes {
      allow list: if request.auth != null || 
                  (request.query.limit <= 500 && 
                   request.query.filters[0].field == 'playlistId' && 
                   isPlaylistPublic(request.query.filters[0].value));
    }
  }
}
